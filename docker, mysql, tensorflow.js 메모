docker run -d --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
//도커 컨데이서 생성시 한글깨짐방지

-- 데이터베이스 생성시 문자셋 및 정렬 방식 지정
CREATE DATABASE DB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

show variables like 'c%'; 
----- character_set_client를 utf8로 변경
mysql> SET character_set_client = utf8;
------ character_set_connection을 utf8로 변경
mysql> SET character_set_connection = utf8;

SHOW VARIABLES LIKE 'character_set_database'; 
이 utf-8인지 확인한다 아니라면 
SET character_set_database = utf8; 이걸로 변경 
FLUSH PRIVILEGES; //적용

-----------도커 컨테이너 접속----------
winpty docker exec -it capstone bash
systemctl restart mariadb

mysql -h 192.168.65.254 -u ha -p //사용자로 접속 
비번 kimhg

mysql -h 192.168.65.254 -u root -p //관리자로 접속 

mysql -u root -p //루트사용자로 접속 
비번:1 


---- mysql -h 192.168.65.254 -u root -p----- 아래 코드들은 이곳가서 권한부여해줌 ----- 비번:1
CREATE USER 'ha'@'%' IDENTIFIED WITH mysql_native_password BY 'kimhg';
GRANT ALL PRIVILEGES ON *.* TO 'ha'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;

ALTER USER 'ha'@'192.168.65.254' IDENTIFIED WITH mysql_native_password BY 'rlagkrud';
//비번 변경 

GRANT ALL PRIVILEGES ON *.* TO 'ha'@'192.168.65.254' WITH GRANT OPTION;
//변경 후 접속 권한 부여 

GRANT ALL PRIVILEGES ON *.* TO 'ha'@'172.17.0.1' WITH GRANT OPTION;
//도커에서 어쩌구 때문에 호스트 이걸로 인식? 뭐그래서 이것도 허용 

GRANT ALL PRIVILEGES ON *.* TO 'ha'@'%' IDENTIFIED BY 'kimhg';
FLUSH PRIVILEGES; //적용 

//아래는 나에게 접근하는 모든 호스트 허용 


CREATE USER 'ha'@'192.168.65.254' IDENTIFIED WITH mysql_native_password BY 'kimhg'; 
//새로운 생성자 생성 
GRANT CREATE ON *.* TO 'ha'@'192.168.65.254'; //create권
GRANT SELECT, INSERT, UPDATE, DELETE ON DB.posts TO 'ha'@'192.168.65.254'; //crud권한
FLUSH PRIVILEGES;//변경사항 적용 

DROP USER 'ha'@'localhost';

docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' pratice-mysql-container
//mysql주소 알기 
=> 172.17.0.2 이거임 
내 주소는 cmd에 ipconfig해서 보고 ping 보냈을 때 가면 그걸로 ! 



------한글 인코딩-------
ALTER TABLE posts CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
//디비 테이블 인코딩 ! 

CREATE TABLE your_table_name (
  -- 컬럼 정의
) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
// 아니면 테이블 생성할 때 이렇게 해줘도됨 


ALTER DATABASE posts DEFAULT CHARACTER SET UTF8;

ALTER TABLE DB MODIFY your_column_name VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;


-----------도커 컨테이너 생성-------------------
docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=<password> -d -p 3306:3306 mysql:latest


# MySQL Docker 컨테이너 중지
$ docker stop mysql-container

# MySQL Docker 컨테이너 시작
$ docker start mysql-container

# MySQL Docker 컨테이너 재시작
$ docker restart capstone

-- 데이터베이스 생성시 문자셋 및 정렬 방식 지정
CREATE DATABASE DB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- posts 테이블의 컬럼들도 utf8mb4와 utf8mb4_unicode_ci로 설정
ALTER TABLE posts
  MODIFY title VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  MODIFY description TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  MODIFY image_url VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  MODIFY category VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  MODIFY name VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  MODIFY profile VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  MODIFY upload_time TIMESTAMP;


============================================================
======한글인코딩을 위한 mariadb접근 =========
1) 실행중인 도커 확인 
docker ps
=> 여기서 도커 아이디 확인 (3dea596267b2) 
2) winpty docker exec -it 3dea596267b2 sh
=> 쉘로 접근 후 
cd /etc/mysql
ls
또는 
cd /etc
ls | grep my.cnf
에서 my.cnf 파일 접근 

만약 my.cnf파일이 없다면 
1) cd /etc/ 
2) vi my.cnf
3) i
4) [mysqlId]에 # UTF-8 설정 추가
default-character-set=utf8mb4
collation-server=utf8mb4_unicode_ci
//오류나면 추가안해도됨 

[mysql]
default-character-set=utf8mb4

[client]
default-character-set=utf8mb4

[mysqldump]
defult-character-set=utf8mb4
이 두가지 추가 
5) esc 
6) :wq + enter //저장후 나감 
7) 재시작 
=> systemctl restart mariadb
------------------------docker hub------------------------
> docker images
> docker tag rlagkrud/capstone:latest rlagkrud/capstone:latest2
//docker tag 기존이미지이름:tag 바꿀이미지이름:tag 
> docker login
> docker push rlagkrud/capstone:latest2 //도커 허브에 업로드된거 확인하기 
> docker pull rlagkrud/capstone:latest2
> docker run -it --name rlagkrud -p 3306:3306 capstone:latest2 //실행
------------------------docker volume------------------------
> docker login //도커 로그인
>docker pull rlagkrud/capstone:tag2 //도커 이미지 다운로드
> docker images //다운로드한 도커 이미지 확인
> docker volume create my_volumes //도커 볼륨 생성
> docker run -it --name Capst -v my_volume:/var/lib/mysql --privileged rlagkrud/capstone:tag2
// 도커 컨테이너 실행 (볼륨을 마운트하여 실행)
// privileged란 도커 컨테이너가 호스트 시스템의 커널에 대한 완전한 권한을 갖도록 하는 옵션 그러나 보안문제로 가능한 피하는게 좋음
> docker exec -it Capst /bin/bas
// 실행된 도커 컨테이너에 쉘 접속
======================================================
sudo usermod -aG docker $USER  
// 도커 사용자 그룹에 현재 사용자 추가 (root 권한 없이 도커 사용을 위해)
docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=my-secret-pw -v /c/mydata:/var/lib/mysql mysql:latest
// MySQL 컨테이너 실행 (볼륨 마운트 및 환경 변수 설정)

docker run -it --name Capst  --link mysql-container:mysql my-app-image
// 다른 컨테이너와의 도커 볼륨 공유를 위한 실행
docker run -it --name AnotherContainer --volumes-from Capst --privileged rlagkrud/capstone:tag2
> docker run -it --name apst -v mya_volume:/var/lib/mysql  --privileged rlagkrud/capstone:tag2
docker cp /var/lib/mysql apst:/data
> docker run -it --name apst -v mya_volume:/var/lib/mysql/DB --privileged rlagkrud/capstone:tag2
// 이건 뭔지 기억이 나지 않지만 그냥 파일을 못찾아 이렇게 한건가?..

---------------------------------tensorflow.js-------------
<설치>
npm install @tensorflow/tfjs
pip install tensorflowjs

<numpy버전 다운>
pip install numpy==1.19.5
tensorflowjs_converter --input_format keras ./model--0005-0.3897.hdf5 ./destination_folder1
 
tensorflowjs_converter --input_format keras ./model--0005-0.3897.hdf5 ./destination_folder
tensorflowjs_converter --input_format=keras /tmp/model.h5 /tmp/tfjs_model

//기존 Keras 모델을 TF.js Layer 형식으로 변환하기
tensorflowjs_converter --input_format keras \ /lsy-one/lsy-one/src/model/model.h5 \ /lsy-one/lsy-one/src/model/tfjs_target_dir
npx tensorflowjs_converter --input_format keras c/lsy-one/lsy-one/src/model/model.h5 c/lsy-one/lsy-one/src/model/tfjs_target_dir

그 전에 npm install -g @tensorflow/tfjs-converter 이거 설치 했는데 만약 안된다면 
npm install -g @tensorflow/tfjs-converter 이걸 사용해서 글로벌로 설치되어있는지 확인(경로)

그래도 안된다면 

npm show @tensorflow/tfjs versions

pip install tensorflowjs 사용 만약 설치가 지연된다면 설치되어있는 텐서플로우를 제거하던가 
pip uninstall tensorflow
pip uninstall tensorflow-intel

pip install --upgrade pip 을 업그래이드 해준다. 

tensorflowjs_converter --input_format keras \
                       c/kimhagyung/model.h5 \
                       c/path/to/tfjs_target_dir

model.hdf5

tensorflowjs_converter --input_format keras \
                       C:\kimhagyung-main\kimhagyung-main\lsy-one\src\model\model.hfd5 \
                       C:\kimhagyung-main\tfjs_target_dir\

//numpy 다운그레이드
pip3 install numpy==1.23.5

pip install protobuf==3.19.0

npm install @tensorflow/tfjs-react-native

# ... (기존의 파이썬 코드)

# Keras 모델을 TensorFlow.js Layers Model 형식으로 저장
tfjs_layers_model_format = '../model/model_tfjs'
tfjs.converters.save_keras_model(model, tfjs_layers_model_format)

# 모델의 클래스 이름을 저장합니다
import json
class_names_json = json.dumps(class_names)
with open('../model/class_names.json', 'w') as f:
    f.write(class_names_json)



tensorflowjs_converter --input_format=keras /path/to/model.hdf5 /path/to/tfjs_model


학습할 때 오류 뜨면 
set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

